---
- name: Create a Tomcat user
  ansible.builtin.user:
    name: "{{ username }}"
    create_home: yes
    home: "{{ home_dir }}"
    shell: "{{ default_shell }}"
    state: present 
- name: Download Tomcat 9
  ansible.builtin.get_url:
    url: "https://dlcdn.apache.org/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"  
- name: Extract the tar file
  ansible.builtin.unarchive:
    creates: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
    src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: "{{ home_dir }}"
    remote_src: yes
- name: Create a symbolic link
  ansible.builtin.file:
    src:  "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
    dest: "{{ tomcat_latest }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: link
- name: Change the ownership of tomcat user
  ansible.builtin.file:
    path: "{{ home_dir }}" 
    owner: "{{ username }}"
    group: "{{ username }}"
    state: directory
    recurse: yes  
- name: find all .sh files in the tomcat bin directory
  ansible.builtin.find:
    paths: "{{ tomcat_bin_directory }}"
    patterns: "*.sh"
  register: sh_files_tomcat_bin
- name: Print o/p of previous module
  debug: 
    var: sh_files_tomcat_bin
- name: Make .sh files Executables
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0755'
  loop: "{{ sh_files_tomcat_bin.files }}"
- name: Copy the tomcat service file
  ansible.builtin.template:
    src: 'tomcat.service.j2' 
    dest: "{{ tomcat_service_location }}"
    owner: "{{ username }}"
    group: "{{ username }}"
  notify:
    - Reload the daemon, enable and start the tomcat service
- name: Force all notified handlers to run at this point, not waiting for normal sync points    
  meta: flush_handlers
- name: ensure tomcat service is running
  ansible.builtin.systemd:
    name: 'tomcat.service'
    state: 'started'
- name: create the tomcat users file
  ansible.builtin.template:
    src: 'tomcat-users.xml.j2'
    dest: "{{ tomcat_latest }}/{{ tomcat_users_relative }}"
    owner: "{{ username }}"
    group: "{{ username }}"
  notify:
    - Reload the daemon, enable and start the tomcat service
- name: Allow manager and hostmanager from specified ip range
  ansible.builtin.template:
    src: 'manager-context.xml.j2'
    dest: "{{ item }}"
    owner: "{{ username }}"
    group: "{{ username }}"
  loop: "{{ tomcat_allow_context_locations }}"
  notify:
    - Reload the daemon, enable and start the tomcat service