---
- name: Install Tomcat 9
  become: yes
  hosts: appserver
  vars:
    - username: tomcat
    - home_dir: /opt/tomcat
    - default_shell: /bin/false
    - tomcat_version: 9.0.65
    - tomcat_latest: /opt/tomcat/latest
    - tomcat_bin_directory: /opt/tomcat/latest/bin
    - tomcat_service_location: /etc/systemd/system/tomcat.service
    - java_home: /usr/lib/jvm/java-11-openjdk-amd64
    - tomcat_admin_user: devops
    - tomcat_admin_password: devops
    - tomcat_users_relative: conf/tomcat-users.xml
    - tomcat_manager_allow_ipregex: ".*"
    - tomcat_allow_context_locations:
        - /opt/tomcat/latest/webapps/manager/META-INF/context.xml
        - /opt/tomcat/latest/webapps/host-manager/META-INF/context.xml
  tasks:
    - name: Update apt repo and cache
      apt:
        update_cache: yes
        force_apt_get: yes
      when: ansible_facts['os_family'] == "Debian"
    - name: Install openjdk 11
      package:
        name: "{{ java_package }}"
        state: present 
    - name: Create a tomcat user
      ansible.builtin.user:
        create_home: yes
        name: "{{ username }}"
        home: "{{ home_dir }}"
        shell: "{{ default_shell }}"
        state: present
      when: ansible_facts['os_family'] == "Debian"  
    - name: Download tomcat
      ansible.builtin.get_url:  
        url: "https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.65/bin/apache-tomcat-9.0.65.tar.gz"
        dest: "/tmp/apache-tomcat-9.0.65.tar.gz"
      when: ansible_facts['os_family'] == "Debian"
    - name: Extract tar file
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-9.0.65.tar.gz"
        dest: "{{ home_dir }}"
        creates: "{{ home_dir }}/apache-tomcat-9.0.65"
        owner: "{{ username }}"
        group: "{{ username }}"
        remote_src: yes
      when: ansible_facts['os_family'] == "Debian"
    - name: Create a symbolic link
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-9.0.65"
        dest: "{{ tomcat_latest }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: link
      when: ansible_facts['os_family'] == "Debian"
    - name: Change ownership for tomcat user
      ansible.builtin.file:
        path: "{{ home_dir }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        recurse: yes
      when: ansible_facts['os_family'] == "Debian"
    - name: find all .sh files in the tomcat bin directory
      ansible.builtin.find:
        paths: "{{ tomcat_bin_directory }}"
        patterns: "*.sh"
      when: ansible_facts['os_family'] == "Debian"
      register: sh_files_tomcat_bin
    - name: Print files from previous module
      debug:
        var: sh_files_tomcat_bin
    - name: Make sh files Executable
      ansible.builtin.file:
        path: '{{ item.path }}'
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0755'
      loop: "{{ sh_files_tomcat_bin.files }}"
      when: ansible_facts['os_family'] == "Debian"
    - name: copy the tomcat service file
      ansible.builtin.template:
        src: 'tomcat.service.j2'
        dest: "{{ tomcat_service_location }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"
      notify:
        - Reload the daemon, enable and start the tomcat service
    - name: Force all notified handlers to run at this point, not waiting for normal sync points    
      meta: flush_handlers
    - name: ensure tomcat service is running
      ansible.builtin.systemd:
        name: 'tomcat.service'
        state: 'started'
      when: ansible_facts['os_family'] == "Debian"
    - name: create the tomcat users file
      ansible.builtin.template:
        src: 'tomcat-users.xml.j2'
        dest: "{{ tomcat_latest }}/{{ tomcat_users_relative }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"
      notify: 
        - Reload the daemon, enable and start the tomcat service
    - name: allow manager & hostmanager from specified ip range
      ansible.builtin.template:
        src: 'manager-context.xml.j2'
        dest: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"
      loop: "{{ tomcat_allow_context_locations }}"
      notify:
        - Reload the daemon, enable and start the tomcat service
  handlers:
    - name: Reload the daemon, enable and start the tomcat service 
      ansible.builtin.systemd:
        name: 'tomcat.service'
        daemon_reload: yes
        enabled: yes
        state: restarted
      when: ansible_facts['os_family'] == "Debian"                 
